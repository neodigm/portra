#!/usr/bin/env python

import argparse
import os
import sys

from libxmp.consts import XMP_NS_DC as NS_DC

from portra.component.export import lr_export_lrtemplate
from portra.component.export import xmp_export_full
from portra.component.export import xmp_export_tonecurve

DEFAULT_OUTPUT_FILENAME = 'DEFAULT_OUTPUT_FILENAME'

def dispatch(args):
    extension = '.lrtemplate' if (args.command == 'lrt') else '.xmp'
    output_filename = None

    if not args.filename.lower().endswith(('.jpg', '.jpeg')):
        print('Input file must be a JPEG.')
        return -1

    if args.output:
        if args.output == DEFAULT_OUTPUT_FILENAME:
            output_filename = os.path.splitext(args.filename)[0] + extension
        else:
            output_filename = clean_filename(args.output)

    xmp = xmp_export_full(args.filename)
    if not xmp:
        print('XMP information could not be loaded from the file. Check to make sure you entered the correct filename.')
        return -1

    if xmp.get_property(NS_DC, 'format') != 'image/jpeg':
        print('Input file must be a JPEG.')
        return -1

    output = xmp
    if args.command == 'tc':
        output = xmp_export_tonecurve(xmp)
    if args.command == 'lrt':
        output = lr_export_lrtemplate(xmp, os.path.splitext(args.filename)[0])

    if output_filename:
        f = open(output_filename, 'w+')
        f.write(str(output))
    else:
        print(str(output))
    return 0

def clean_filename(filename, replace=' '):
    """
    https://gist.github.com/wassname/1393c4a57cfcbf03641dbc31886123b8#file-to_filename-py

    python convert string to safe filename
    """
    whitelist = "-_.() %s%s" % (string.ascii_letters, string.digits)
    # replace spaces
    for r in replace:
        filename = filename.replace(r,'_')

    # keep only valid ascii chars
    cleaned_filename = unicodedata.normalize('NFKD', filename).encode('ASCII', 'ignore').decode()

    # keep only whitelisted chars
    return ''.join(c for c in cleaned_filename if c in whitelist)

def main(argv=None):
    parser = argparse.ArgumentParser(description='Extracts XMP metadata stored in JPEG photos.')
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    parser_xmp = subparsers.add_parser('xmp', help='Exports an XMP sidecar file.')
    parser_xmp.add_argument('filename', type=str, help='filename of the jpeg image')
    parser_xmp.add_argument('--output', '-o', type=str, nargs='?', default=None, const=DEFAULT_OUTPUT_FILENAME, help='outputs to a file if this flag is enabled, optionally, provide a filename to output to (default: filename)')

    parser_tc = subparsers.add_parser('tc', help='Exports the tone curve as an .xmp file.')
    parser_tc.add_argument('filename', type=str, help='filename of the jpeg image')
    parser_tc.add_argument('--output', '-o', type=str, nargs='?', default=None, const=DEFAULT_OUTPUT_FILENAME, help='outputs to a file if this flag is enabled, optionally, provide a filename to output to (default: filename)')

    parser_lrt = subparsers.add_parser('lrt', help='Exports a .lrtemplate file from the image.')
    parser_lrt.add_argument('filename', type=str, help='filename of the jpeg image')
    parser_lrt.add_argument('--output', '-o', type=str, nargs='?', default=None, const=DEFAULT_OUTPUT_FILENAME, help='outputs to a file if this flag is enabled, optionally, provide a filename to output to (default: filename)')

    args = parser.parse_args(argv)
    return dispatch(args)

if __name__ == '__main__':
    main()
